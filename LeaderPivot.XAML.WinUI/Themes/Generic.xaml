<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:LeaderAnalytics.LeaderPivot.XAML.WinUI"
    xmlns:localConverters="using:LeaderAnalytics.LeaderPivot.XAML.WinUI.Converters"
    xmlns:ui="using:CommunityToolkit.WinUI.UI"
    xmlns:converters="using:CommunityToolkit.WinUI.UI.Converters"
    xmlns:triggers="using:CommunityToolkit.WinUI.UI.Triggers"
    xmlns:Interactivity="using:Microsoft.Xaml.Interactivity" 
    xmlns:Interactions="using:Microsoft.Xaml.Interactions.Core"
    xmlns:leaderpivot="using:LeaderAnalytics.LeaderPivot.XAML.WinUI">
    
    <ResourceDictionary.MergedDictionaries>
        <!--https://github.com/microsoft/microsoft-ui-xaml/issues/3371-->
        <!--<ResourceDictionary Source="ms-appx:///LeaderAnalytics.LeaderPivot.XAML.WinUI/Themes/DimensionButton.xaml" />-->
    </ResourceDictionary.MergedDictionaries>

    <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
    <localConverters:IntToThicknessConverter x:Key="IntToThicknessConverter"/>
    <localConverters:DimensionToHiddenAction x:Key="DimensionToHiddenAction"/>
    <Style TargetType="ScrollViewer">
        <Setter Property="HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
    </Style>

    <!--<Style TargetType="local:DropDownButton" x:Key="DropDownButtonStyle">
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="Margin" Value="0,0,6,0" />
    </Style>-->

    <Style TargetType="Button" x:Key="ReloadButtonStyle">
        <Setter Property="Margin" Value="0" />
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Padding" Value="4"/>
    </Style>

    <Style TargetType="TextBlock" x:Key="LeftTextBlockStyle">
        <Setter Property="TextAlignment" Value="Left"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>

    <Style TargetType="TextBlock" x:Key="RightTextBlockStyle">
        <Setter Property="TextAlignment" Value="Right"/>
        <Setter Property="TextWrapping" Value="NoWrap"/>
    </Style>

    <Style TargetType="local:LeaderPivotControl" >
        <Setter Property="CellBorderBrush" Value="{ThemeResource CellBorderBrush}"/>
        <Setter Property="CellBorderThickness" Value=".5"/>
        <Setter Property="CellPadding" Value="4"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:LeaderPivotControl" >
                    <Border Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            VerticalAlignment="Top" HorizontalAlignment="Left" ui:FrameworkElementExtensions.AncestorType="local:LeaderPivotControl" >

                        <Border BorderBrush="{TemplateBinding CellBorderBrush}" ui:FrameworkElementExtensions.AncestorType="local:LeaderPivotControl"
                                BorderThickness="{TemplateBinding CellBorderThickness}"
                                 x:Name="leaderPivotControl" >

                            <ScrollViewer x:Name="ContentScrollViewer" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                                <Grid x:Name="PART_Grid" />
                            </ScrollViewer>
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="local:CellContainer">
        <Setter Property="Margin" Value="0.00"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:CellContainer">
                    <!-- This border provides uniform BorderBrush and BorderThickness only. -->
                    <Border Background="Transparent" Padding="0" ui:FrameworkElementExtensions.AncestorType="local:LeaderPivotControl"
                            BorderBrush="{Binding (ui:FrameworkElementExtensions.Ancestor).CellBorderBrush, RelativeSource={RelativeSource Self}}"
                            BorderThickness="{Binding (ui:FrameworkElementExtensions.Ancestor).CellBorderThickness, RelativeSource={RelativeSource Self}}"
                            >
                        <ContentPresenter/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="local:BaseCell" x:Key="BaseCellStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:BaseCell">

                    <!-- This border provides cell-specific background. Also proives padding based on value provided by LeaderPivotControl  -->
                    <Border Background="{TemplateBinding Background}" BorderThickness="0" ui:FrameworkElementExtensions.AncestorType="local:LeaderPivotControl"
                            Padding="{Binding (ui:FrameworkElementExtensions.Ancestor).CellPadding, RelativeSource={RelativeSource Self}, Converter= {StaticResource IntToThicknessConverter}}">

                        <Border.Resources>
                            <Style TargetType="TextBlock" BasedOn="{StaticResource RightTextBlockStyle}"></Style>
                        </Border.Resources>

                        <TextBlock Text="{TemplateBinding Content}" Style="{TemplateBinding ContentStyle}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentStyle">
            <Setter.Value>
                <Style TargetType="TextBlock" BasedOn="{StaticResource RightTextBlockStyle}"></Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="local:BaseCell" BasedOn="{StaticResource BaseCellStyle}" x:Key="BaseTotalCellStyle">
        <Setter Property="Background" Value="LightGray"/>
    </Style>

    <Style TargetType="local:MeasureCell" BasedOn="{StaticResource BaseCellStyle}">
        <Setter Property="Foreground" Value="{ThemeResource ForegroundBrush}"/>
        <Setter Property="Background" Value="{ThemeResource MeasureBackgroundBrush}"/>
    </Style>

    <Style TargetType="local:TotalCell"  BasedOn="{StaticResource BaseTotalCellStyle}">
        <Setter Property="Foreground" Value="{ThemeResource ForegroundBrush}"/>
        <Setter Property="Background" Value="{ThemeResource TotalBackgroundBrush}"/>
    </Style>

    <Style TargetType="local:GrandTotalCell"  BasedOn="{StaticResource BaseTotalCellStyle}">
        <Setter Property="Foreground" Value="{ThemeResource ForegroundBrush}"/>
        <Setter Property="Background" Value="{ThemeResource GrandTotalBackgroundBrush}"/>
    </Style>

    <Style TargetType="local:MeasureLabelCell"  BasedOn="{StaticResource BaseCellStyle}">
        <Setter Property="Foreground" Value="{ThemeResource ForegroundBrush}"/>
        <Setter Property="Background" Value="{ThemeResource MeasureLabelBackgroundBrush}"/>
        <Setter Property="ContentStyle">
            <Setter.Value>
                <Style TargetType="TextBlock" BasedOn="{StaticResource LeftTextBlockStyle}"></Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="local:MeasureTotalLabelCell"  BasedOn="{StaticResource BaseTotalCellStyle}">
        <Setter Property="Foreground" Value="{ThemeResource ForegroundBrush}"/>
        <Setter Property="Background" Value="{ThemeResource TotalLabelBackgroundBrush}"/>
        <Setter Property="ContentStyle">
            <Setter.Value>
                <Style TargetType="TextBlock" BasedOn="{StaticResource LeftTextBlockStyle}"></Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="local:TotalHeaderCell"  BasedOn="{StaticResource BaseTotalCellStyle}">
        <Setter Property="Foreground" Value="{ThemeResource ForegroundBrush}"/>
        <Setter Property="Background" Value="{ThemeResource TotalHeaderBackgroundBrush}"/>
        <Setter Property="ContentStyle">
            <Setter.Value>
                <Style TargetType="TextBlock" BasedOn="{StaticResource LeftTextBlockStyle}"></Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="local:GrandTotalHeaderCell"  BasedOn="{StaticResource BaseTotalCellStyle}">
        <Setter Property="Foreground" Value="{ThemeResource ForegroundBrush}"/>
        <Setter Property="Background" Value="{ThemeResource GrandTotalHeaderBackgroundBrush}"/>
        <Setter Property="ContentStyle">
            <Setter.Value>
                <Style TargetType="TextBlock" BasedOn="{StaticResource LeftTextBlockStyle}"></Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="local:GroupHeaderCell" >
        <Setter Property="Foreground" Value="{ThemeResource ForegroundBrush}"/>
        <Setter Property="Background" Value="{ThemeResource GroupHeaderBackgroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:GroupHeaderCell">
                    <Border Background="{TemplateBinding Background}" ui:FrameworkElementExtensions.AncestorType="local:LeaderPivotControl"
                            BorderThickness="0"
                            Padding="{Binding (ui:FrameworkElementExtensions.Ancestor).CellPadding, RelativeSource={RelativeSource Self}, Converter={StaticResource IntToThicknessConverter}}">

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup>
                                <VisualState>
                                    <VisualState.StateTriggers>
                                        <triggers:IsEqualStateTrigger Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsExpanded, Mode=OneWay}"  To="True"/>
                                    </VisualState.StateTriggers>
                                    <VisualState.Setters>
                                        <Setter Target="b1.Padding" Value="5,7,5,3"/>
                                        <Setter Target="b1.Content" Value="&#xE936;"/>
                                    </VisualState.Setters>
                                </VisualState>
                                <VisualState>
                                    <VisualState.StateTriggers>
                                        <triggers:IsEqualStateTrigger Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsExpanded, Mode=OneWay}" To="False"/>
                                    </VisualState.StateTriggers>
                                    <VisualState.Setters>
                                        <Setter Target="b1.Padding" Value="9,4,1,6"/>
                                        <Setter Target="b1.Content" Value="&#xE937;"/>
                                    </VisualState.Setters>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>



                        <StackPanel Orientation="Horizontal">
                            
                            <Button ui:FrameworkElementExtensions.AncestorType="local:GroupHeaderCell" x:Name="b1" 
                                    Command="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ToggleNodeExpansionCommand}" CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=NodeID}"
                                    Foreground="{Binding (ui:FrameworkElementExtensions.Ancestor).Foreground, RelativeSource={RelativeSource Self}}"
                                    Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CanToggleExpansion, Converter={StaticResource BoolToVisibilityConverter}}">
                                <Button.Resources>
                                    <Style TargetType="Button">
                                        <Setter Property="BorderThickness" Value="0"/>
                                        <Setter Property="Background" Value="Transparent"/>
                                        <Setter Property="CornerRadius" Value="45"/>
                                        <Setter Property="Height" Value="25"/>
                                        <Setter Property="Width" Value="25"/>
                                        <Setter Property="HorizontalAlignment" Value="Left"/>
                                        <Setter Property="VerticalAlignment" Value="top"/>
                                        <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                        <Setter Property="VerticalContentAlignment" Value="Bottom"/>
                                        <Setter Property="FontSize" Value="12"/>
                                        <Setter Property="FontFamily" Value="Segoe MDL2 Assets"/>
                                        <Setter Property="Margin" Value="3"/>
                                    </Style>
                                </Button.Resources>
                               
                            </Button>
                            <TextBlock Text="{TemplateBinding Content}" Padding="{TemplateBinding Padding}" Margin="0,6,0,0" FontSize="{TemplateBinding FontSize}"/>
                        </StackPanel>
                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="local:DimensionButton">
        <Setter Property="ButtonStyle">
            <Setter.Value>
                <Style TargetType="DropDownButton">
                    <Setter Property="Foreground" Value="{ThemeResource DimensionButtonForegroundBrush}"/>
                    <Setter Property="Background" Value="{ThemeResource DimensionButtonBackgroundBrush}"/>
                    <Setter Property="Padding" Value="6"/>
                    <Setter Property="Margin" Value="4"/>
                    <Setter Property="BorderBrush" Value="Gray"/>
                    <Setter Property="BorderThickness" Value=".5"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ListBoxStyle">
            <Setter.Value>
                <Style TargetType="ListBox">
                    <Setter Property="Foreground" Value="{ThemeResource DimensionButtonListboxForegroundBrush}"/>
                    <Setter Property="Background" Value="{ThemeResource DimensionButtonListboxBackgroundBrush}"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ListBoxItemStyle">
            <Setter.Value>
                <Style TargetType="ListBoxItem">
                    <Setter Property="Foreground" Value="{ThemeResource DimensionButtonListboxItemForegroundBrush}"/>
                    <Setter Property="Background" Value="{ThemeResource DimensionButtonListboxItemBackgroundBrush}"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:DimensionButton">
                    <DropDownButton 
                        Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Dimension.DisplayValue}"
                        Style="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ButtonStyle}">
                        <DropDownButton.Flyout>
                            <MenuFlyout Placement="Bottom" >
                                <MenuFlyoutItem Text="Sort Ascending" Command="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MenuCommand}" >
                                    <MenuFlyoutItem.CommandParameter>
                                        <local:DimensionAction>SortAscending</local:DimensionAction>
                                    </MenuFlyoutItem.CommandParameter>
                                    <MenuFlyoutItem.Icon>
                                        <FontIcon FontFamily="Segoe MDL2 Assets" Glyph="&#xE725;" FontWeight="Bold"/>
                                    </MenuFlyoutItem.Icon>
                                </MenuFlyoutItem>

                                <MenuFlyoutItem Text="Sort Descending" Command="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MenuCommand}" >
                                    <MenuFlyoutItem.CommandParameter>
                                        <local:DimensionAction>SortDescending</local:DimensionAction>
                                    </MenuFlyoutItem.CommandParameter>
                                    <MenuFlyoutItem.Icon>
                                        <FontIcon FontFamily="Segoe MDL2 Assets" Glyph="&#xE8CA;"/>
                                    </MenuFlyoutItem.Icon>
                                </MenuFlyoutItem>

                                <MenuFlyoutItem Text="Hide" Command="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MenuCommand}" >
                                    <MenuFlyoutItem.CommandParameter>
                                        <local:DimensionAction>Hide</local:DimensionAction>
                                    </MenuFlyoutItem.CommandParameter>
                                    <MenuFlyoutItem.Icon>
                                        <FontIcon FontFamily="Segoe MDL2 Assets" Glyph="&#xE8C2;"/>
                                    </MenuFlyoutItem.Icon>
                                </MenuFlyoutItem>
                            </MenuFlyout>
                        </DropDownButton.Flyout>
                    </DropDownButton>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="local:DimensionContainerCell">
        <Setter Property="Foreground" Value="{ThemeResource DimensionContainerCellForegroundBrush}"/>
        <Setter Property="Background" Value="{ThemeResource DimensionContainerCellBackgroundBrush}"/>
        <Setter Property="Padding" Value="6"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:DimensionContainerCell" >
                    <Border ui:FrameworkElementExtensions.AncestorType="local:LeaderPivotControl" x:Name="layoutRoot"
                            Background="{TemplateBinding Background}" 
                            BorderThickness="0" 
                            Padding="{Binding (ui:FrameworkElementExtensions.Ancestor).CellPadding, RelativeSource={RelativeSource Self}, Converter={StaticResource IntToThicknessConverter}}">

                        <ScrollViewer ui:FrameworkElementExtensions.AncestorType="local:LeaderPivotControl" 
                            Visibility="{Binding (ui:FrameworkElementExtensions.Ancestor).DisplayDimensionButtons, RelativeSource={RelativeSource Self}, Converter={StaticResource BoolToVisibilityConverter}}"  
                            VerticalScrollBarVisibility="Auto"
                            HorizontalScrollBarVisibility="Auto"
                            HorizontalAlignment="Left" >
                            <ListView 
                                x:Name="DimensionItems" 
                                ItemsSource="{TemplateBinding Dimensions}" 
                                CanDragItems="True" 
                                CanReorderItems="True" 
                                AllowDrop="True" 
                                SelectionMode="Single">
                                <ListView.ItemTemplate>
                                    <DataTemplate>
                                        <local:DimensionButton 
                                            Dimension="{Binding}" 
                                            Command="{Binding (ui:FrameworkElementExtensions.Ancestor).DimensionEventCommand, ElementName=layoutRoot, Mode=TwoWay}" >
                                        </local:DimensionButton>
                                    </DataTemplate>
                                </ListView.ItemTemplate>
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Horizontal" AllowDrop="True"  Spacing="-20" ></StackPanel>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ListView>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="local:MeasureContainerCell">
        <Setter Property="Foreground" Value="{ThemeResource MeasureContainerCellForegroundBrush}"/>
        <Setter Property="Background" Value="{ThemeResource MeasureContainerCellBackgroundBrush}"/>
        <Setter Property="ReloadButtonStyle">
            <Setter.Value>
                <Style TargetType="Button">
                    <Setter Property="Foreground" Value="{ThemeResource ReloadButtonForegroundBrush}"/>
                    <Setter Property="Background" Value="{ThemeResource ReloadButtonBackgroundBrush}"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="MeasureCheckBoxStyle">
            <Setter.Value>
                <Style TargetType="ToggleSwitch">
                    <Setter Property="Foreground" Value="{ThemeResource MeasureCheckboxForegroundBrush}"/>
                    <Setter Property="Background" Value="{ThemeResource MeasureCheckboxBackgroundBrush}"/>
                    <Setter Property="Margin" Value="0,-5,0,-5"/>
                    <Setter Property="Padding" Value="0,-5,0,-5"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="HiddenDimensionsListBoxStyle">
            <Setter.Value>
                <Style TargetType="ComboBox">
                    <Setter Property="Foreground" Value="{ThemeResource HiddenDimListBoxForegroundBrush}"/>
                    <Setter Property="Background" Value="{ThemeResource HiddenDimListBoxBackgroundBrush}"/>
                </Style>
            </Setter.Value>
        </Setter>
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:MeasureContainerCell" >
                    <Border Background="{TemplateBinding Background}" ui:FrameworkElementExtensions.AncestorType="local:LeaderPivotControl" x:Name="measureContainerBorder"
                            BorderThickness="0"
                            Padding="{Binding (ui:FrameworkElementExtensions.Ancestor).CellPadding, ElementName=measureContainerBorder, Converter={StaticResource IntToThicknessConverter}}">
                        <ScrollViewer x:Name="ContentScrollViewer" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto">
                            <Grid x:Name="PART_Grid" ui:FrameworkElementExtensions.AncestorType="local:MeasureContainerCell" >
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Button Content="Reload Data" ui:FrameworkElementExtensions.AncestorType="local:LeaderPivotControl"
                                        Style="{Binding (ui:FrameworkElementExtensions.Ancestor).ReloadButtonStyle, ElementName=PART_Grid}" 
                                        Command="{Binding (ui:FrameworkElementExtensions.Ancestor).ReloadDataCommand, RelativeSource={RelativeSource Self}}" 
                                        Visibility="{Binding (ui:FrameworkElementExtensions.Ancestor).DisplayReloadDataButton, RelativeSource={RelativeSource Self}, Converter={StaticResource BoolToVisibilityConverter}}" />
                                
                                <ItemsControl x:Name="measureItemsControl"
                                              ui:FrameworkElementExtensions.AncestorType="local:LeaderPivotControl"
                                              Grid.Row="1" Margin="0,10,0,0"
                                              ItemsSource="{Binding (ui:FrameworkElementExtensions.Ancestor).ViewBuilder.Measures, RelativeSource={RelativeSource Self}}" 
                                              Visibility="{Binding DisplayMeasureSelectors, Converter={StaticResource BoolToVisibilityConverter}}">
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <ToggleSwitch 
                                                OnContent="{Binding Item.DisplayValue}" OffContent="{Binding Item.DisplayValue}" 
                                                IsOn="{Binding IsSelected, Mode=TwoWay}" 
                                                Style="{Binding (ui:FrameworkElementExtensions.Ancestor).MeasureCheckBoxStyle, ElementName=PART_Grid}">
                                                <Interactivity:Interaction.Behaviors>
                                                    <Interactions:EventTriggerBehavior EventName="Toggled">
                                                        <Interactions:InvokeCommandAction 
                                                            Command="{Binding (ui:FrameworkElementExtensions.Ancestor).ToggleMeasureEnabledCommand, ElementName=measureItemsControl, Mode=OneWay}"
                                                            CommandParameter="{Binding}">
                                                        </Interactions:InvokeCommandAction>
                                                    </Interactions:EventTriggerBehavior>
                                                </Interactivity:Interaction.Behaviors>
                                            </ToggleSwitch>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>


                                <ToggleSwitch ui:FrameworkElementExtensions.AncestorType="local:LeaderPivotControl" x:Name="grandTotalsToggle"
                                          OnContent="Grand Totals"  OffContent="Grand Totals" 
                                          IsOn="{Binding (ui:FrameworkElementExtensions.Ancestor).ViewBuilder.DisplayGrandTotals, RelativeSource={RelativeSource Self}, Mode=TwoWay}" 
                                          Visibility="{Binding (ui:FrameworkElementExtensions.Ancestor).DisplayGrandTotalOption, RelativeSource={RelativeSource Self}, Converter={StaticResource BoolToVisibilityConverter}}"
                                          Style="{Binding (ui:FrameworkElementExtensions.Ancestor).MeasureCheckBoxStyle, ElementName=PART_Grid}"
                                          Grid.Row="2">
                                    <Interactivity:Interaction.Behaviors>
                                        <Interactions:EventTriggerBehavior EventName="Toggled">
                                            <Interactions:InvokeCommandAction 
                                                            Command="{Binding (ui:FrameworkElementExtensions.Ancestor).ReloadDataCommand, ElementName=grandTotalsToggle, Mode=OneWay}"
                                                            CommandParameter="{Binding}">
                                            </Interactions:InvokeCommandAction>
                                        </Interactions:EventTriggerBehavior>
                                    </Interactivity:Interaction.Behaviors>
                                </ToggleSwitch>



                                <local:DimensionContainerCell ui:FrameworkElementExtensions.AncestorType="local:LeaderPivotControl"
                                    BorderThickness="0" Margin="0,3,0,0"
                                    IsRows="True" 
                                    Dimensions="{Binding (ui:FrameworkElementExtensions.Ancestor).ViewBuilder.RowDimensions, RelativeSource={RelativeSource Self}}" 
                                    Command="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Command, Mode=TwoWay}"
                                    Grid.Row="3"/>


                                <ComboBox x:Name="hiddenDimensionsCombo" 
                                          ui:FrameworkElementExtensions.AncestorType="local:LeaderPivotControl"
                                          Grid.Row="4" HorizontalAlignment="Stretch"
                                          Style="{TemplateBinding HiddenDimensionsListBoxStyle}"
                                          Padding="6" Margin="0,6,0,6"
                                          Text="Hidden Dimensions" 
                                          IsEditable="False" 
                                          SelectedValuePath="DisplayValue"
                                          DisplayMemberPath="DisplayValue"
                                          SelectedItem="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectedHiddenDimension, Mode=TwoWay}" 
                                          Visibility="{Binding (ui:FrameworkElementExtensions.Ancestor).ViewBuilder.HiddenDimensionsVisibility, RelativeSource={RelativeSource Self}}"
                                          ItemsSource="{Binding (ui:FrameworkElementExtensions.Ancestor).ViewBuilder.HiddenDimensions, RelativeSource={RelativeSource Self}}">
                                    
                                    <!--https://github.com/microsoft/XamlBehaviors/issues/240-->
                                    <!--<Interactions:EventTriggerBehavior EventName="SelectionChanged">
                                        <Interactions:InvokeCommandAction 
                                            Command="{Binding (ui:FrameworkElementExtensions.Ancestor).DimensionEventCommand, ElementName=hiddenDimensionsCombo, Mode=TwoWay, Converter={StaticResource DimensionToHiddenAction}}" 
                                            CommandParameter="{Binding}">
                                        </Interactions:InvokeCommandAction>
                                    </Interactions:EventTriggerBehavior>-->
                                </ComboBox>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="DimensionButtonItemTemplate">
        <Border Margin="2,3,2,3">
            <CheckBox HorizontalAlignment="Left" VerticalAlignment="Center" ui:FrameworkElementExtensions.AncestorType="local:DimensionButton"
                          Command="{Binding (ui:FrameworkElementExtensions.Ancestor).CheckboxCheckedCommand}"
                          CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}"
                          Content="{Binding (ui:FrameworkElementExtensions.Ancestor).Content, Converter={StaticResource DimensionActionDescriptionConverter}}">

                <!--<CheckBox.IsChecked>
                    <MultiBinding Converter="{StaticResource DimensionEventCheckedConverter}" Mode="OneWay" >
                        <Binding RelativeSource="{RelativeSource AncestorType=local:DimensionButton}" Path="Dimension" Mode="OneWay" />
                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Content" Mode="OneWay"  />
                    </MultiBinding>
                </CheckBox.IsChecked>
                <CheckBox.IsEnabled>
                    <MultiBinding Converter="{StaticResource DimensionEventEnabledConverter}" Mode="OneWay">
                        <Binding RelativeSource="{RelativeSource AncestorType=ListBoxItem}" Path="Content" />
                        <Binding RelativeSource="{RelativeSource AncestorType=local:DimensionContainerCell}" Path="." />
                    </MultiBinding>
                </CheckBox.IsEnabled>-->
            </CheckBox>
        </Border>
    </DataTemplate>

</ResourceDictionary>
